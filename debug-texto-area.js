// Script para probar y verificar que el texto se mantenga dentro del cuadrado morado

console.log('üîç INICIANDO PRUEBAS DE √ÅREA DE TEXTO');

// Funci√≥n para crear un testimonio de prueba con diferentes longitudes de texto
function probarTextoEnArea() {
    const testimoniosPrueba = [
        {
            nombre: "Usuario Test 1",
            texto: "Este es un texto corto para probar que se mantenga dentro del √°rea.",
            color: "#E8F5E8"
        },
        {
            nombre: "Usuario Test 2", 
            texto: "Este es un texto un poco m√°s largo para verificar que el sistema ajuste correctamente el tama√±o de fuente y se mantenga dentro de los l√≠mites del cuadrado morado sin desbordarse.",
            color: "#FFE8F0"
        },
        {
            nombre: "Usuario Test 3",
            texto: "Este es un texto extremadamente largo que est√° dise√±ado espec√≠ficamente para probar los l√≠mites del sistema de ajuste autom√°tico de texto. El objetivo es verificar que incluso con contenido muy extenso, el texto se mantenga completamente dentro del √°rea designada sin desbordarse fuera del cuadrado morado. Esto es crucial para mantener la integridad visual del dise√±o.",
            color: "#E8F0FF"
        }
    ];
    
    console.log('üìù Creando testimonios de prueba...');
    
    testimoniosPrueba.forEach((testimonio, index) => {
        setTimeout(() => {
            console.log(`\nüß™ PRUEBA ${index + 1}: ${testimonio.texto.length} caracteres`);
            
            // Simular la creaci√≥n de testimonio
            if (typeof crearNuevoTestimonio === 'function') {
                crearNuevoTestimonio(testimonio.nombre, testimonio.texto, '#333333', testimonio.color);
            } else {
                console.error('‚ùå Funci√≥n crearNuevoTestimonio no disponible');
            }
        }, index * 1000);
    });
}

// Funci√≥n para verificar todos los testimonios existentes
function verificarTodosLosTextos() {
    console.log('\nüîç VERIFICANDO TODOS LOS TESTIMONIOS EXISTENTES...');
    
    const todosLosTestimonios = document.querySelectorAll('.testimonio-carta-wrapper');
    console.log(`üìä Total de testimonios encontrados: ${todosLosTestimonios.length}`);
    
    todosLosTestimonios.forEach((testimonio, index) => {
        const foreignObject = testimonio.querySelector('foreignObject');
        const contenidoDiv = testimonio.querySelector('foreignObject div');
        
        if (foreignObject && contenidoDiv) {
            const ancho = parseInt(foreignObject.getAttribute('width') || '0');
            const alto = parseInt(foreignObject.getAttribute('height') || '0');
            const x = parseInt(foreignObject.getAttribute('x') || '0');
            const y = parseInt(foreignObject.getAttribute('y') || '0');
            
            const texto = contenidoDiv.textContent || '';
            const fontSize = contenidoDiv.style.fontSize || 'no definido';
            
            console.log(`\nüìã TESTIMONIO ${index + 1}:`);
            console.log(`   üìê Posici√≥n: x=${x}, y=${y}`);
            console.log(`   üìè Dimensiones: ${ancho}x${alto}px`);
            console.log(`   üìù Texto: ${texto.length} caracteres`);
            console.log(`   üî§ Font size: ${fontSize}`);
            
            // Verificar si est√° en la posici√≥n correcta (dentro del cuadrado morado)
            const posicionCorrecta = (x >= 85 && x <= 95) && (y >= 140 && y <= 150);
            const tama√±oCorrecto = ancho === 200 && alto === 80;
            
            if (posicionCorrecta && tama√±oCorrecto) {
                console.log(`   ‚úÖ POSICI√ìN Y TAMA√ëO CORRECTOS`);
            } else {
                console.log(`   ‚ö†Ô∏è NECESITA AJUSTE: posici√≥n=${posicionCorrecta}, tama√±o=${tama√±oCorrecto}`);
                
                // Aplicar correcci√≥n autom√°tica
                foreignObject.setAttribute('x', '90');
                foreignObject.setAttribute('y', '145');
                foreignObject.setAttribute('width', '200');
                foreignObject.setAttribute('height', '80');
                console.log(`   üîß CORRECCI√ìN APLICADA`);
            }
            
            // Verificar desbordamiento
            if (contenidoDiv.scrollHeight > contenidoDiv.clientHeight) {
                console.log(`   ‚ö†Ô∏è POSIBLE DESBORDAMIENTO detectado`);
                
                // Aplicar ajuste de emergencia
                const currentSize = parseFloat(contenidoDiv.style.fontSize) || 10;
                const newSize = Math.max(5, currentSize - 1);
                contenidoDiv.style.fontSize = newSize + 'px';
                contenidoDiv.style.lineHeight = '0.9';
                console.log(`   üîß AJUSTE DE EMERGENCIA: ${newSize}px`);
            }
        }
    });
}

// Funci√≥n para aplicar dimensiones correctas a todos los testimonios
function corregirTodasLasDimensiones() {
    console.log('\nüîß APLICANDO CORRECCI√ìN MASIVA DE DIMENSIONES...');
    
    const todosLosTestimonios = document.querySelectorAll('.testimonio-carta-wrapper');
    
    todosLosTestimonios.forEach((testimonio, index) => {
        const foreignObject = testimonio.querySelector('foreignObject');
        const contenidoDiv = testimonio.querySelector('foreignObject div');
        
        if (foreignObject && contenidoDiv) {
            // Aplicar dimensiones fijas correctas
            foreignObject.setAttribute('x', '90');
            foreignObject.setAttribute('y', '145');
            foreignObject.setAttribute('width', '200');
            foreignObject.setAttribute('height', '80');
            
            // Aplicar estilos restrictivos al contenido
            contenidoDiv.style.width = '100%';
            contenidoDiv.style.height = '100%';
            contenidoDiv.style.maxWidth = '100%';
            contenidoDiv.style.maxHeight = '100%';
            contenidoDiv.style.overflow = 'hidden';
            contenidoDiv.style.boxSizing = 'border-box';
            contenidoDiv.style.display = 'flex';
            contenidoDiv.style.alignItems = 'center';
            contenidoDiv.style.justifyContent = 'center';
            contenidoDiv.style.textAlign = 'center';
            contenidoDiv.style.padding = '4px';
            contenidoDiv.style.margin = '0';
            
            // Ajustar tama√±o de fuente seg√∫n longitud del texto
            const texto = contenidoDiv.textContent || '';
            let fontSize;
            
            if (texto.length <= 80) {
                fontSize = '9px';
            } else if (texto.length <= 120) {
                fontSize = '8px';
            } else if (texto.length <= 160) {
                fontSize = '7px';
            } else if (texto.length <= 200) {
                fontSize = '6px';
            } else {
                fontSize = '5px';
            }
            
            contenidoDiv.style.fontSize = fontSize;
            contenidoDiv.style.lineHeight = '1.1';
            
            console.log(`‚úÖ Testimonio ${index + 1} corregido: ${texto.length} chars, ${fontSize}`);
        }
    });
    
    console.log('‚úÖ CORRECCI√ìN MASIVA COMPLETADA');
}

// Funci√≥n para mostrar el √°rea de prueba visual
function mostrarAreaPrueba() {
    console.log('\nüéØ CREANDO MARCADOR VISUAL DEL √ÅREA CORRECTA...');
    
    // Crear un div temporal para mostrar el √°rea exacta donde debe estar el texto
    const marcador = document.createElement('div');
    marcador.id = 'marcador-area-texto';
    marcador.style.position = 'fixed';
    marcador.style.border = '2px solid red';
    marcador.style.backgroundColor = 'rgba(255, 0, 0, 0.1)';
    marcador.style.width = '200px';
    marcador.style.height = '80px';
    marcador.style.zIndex = '9999';
    marcador.style.pointerEvents = 'none';
    marcador.textContent = '√ÅREA CORRECTA DEL TEXTO';
    marcador.style.fontSize = '10px';
    marcador.style.color = 'red';
    marcador.style.textAlign = 'center';
    marcador.style.lineHeight = '80px';
    
    document.body.appendChild(marcador);
    
    console.log('üî¥ Marcador rojo agregado temporalmente');
    console.log('üí° Posiciona este marcador sobre el cuadrado morado de un testimonio para verificar');
    
    // Remover el marcador despu√©s de 10 segundos
    setTimeout(() => {
        if (document.getElementById('marcador-area-texto')) {
            document.getElementById('marcador-area-texto').remove();
            console.log('üóëÔ∏è Marcador removido');
        }
    }, 10000);
}

// Funciones disponibles para usar en la consola
console.log(`
üõ†Ô∏è FUNCIONES DISPONIBLES:

1. probarTextoEnArea() - Crear testimonios de prueba con diferentes longitudes
2. verificarTodosLosTextos() - Verificar y ajustar todos los testimonios existentes  
3. corregirTodasLasDimensiones() - Aplicar correcci√≥n masiva de dimensiones
4. mostrarAreaPrueba() - Mostrar marcador visual del √°rea correcta

üí° Uso: Simplemente copia y pega el nombre de la funci√≥n en la consola
`);

// Auto-ejecutar verificaci√≥n inicial
setTimeout(() => {
    verificarTodosLosTextos();
}, 1000);
